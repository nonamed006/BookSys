package com.example.demo.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.dto.RentDto;
import com.example.demo.service.BookService;
import com.example.demo.service.UserService;
import com.example.demo.vo.Book;
import com.example.demo.vo.Rent;
import com.example.demo.vo.User;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class MainController {

	private final BookService bookService;
	private final UserService userService;
	private final HttpSession session;

	// 헤더에 사용자 정보 담기 -----------------------------------------------
	@GetMapping("/user/head")
	public User findById(Integer personId) {
		User userinfo = (User) session.getAttribute("userinfo");
		personId = userinfo.getNo();
		return userService.findById(personId);
	}

	// 책 리스트 불러옴 -----------------------------------------------
	@GetMapping("/main")
	public List<Book> findBookList2() {
		List<Book> book = bookService.getBookList();
		return book;
	}

	// no로 도서 리스트 조회 -----------------------------------------------
	@GetMapping("/bookdetail/{no}")
	public Book findByNo(@PathVariable int no) {
		return bookService.findByNo(no);
	}

	// book_no로 대여중인 회원 조회 -----------------------------------------------
//	@GetMapping("/rentbook/{no}")
//	public RentDto finByBookNo(@PathVariable int no) {
//		return bookService.findByBookNo(no);
//	}

	// 출판사로 도서 리스트 조회 -----------------------------------------------
	@GetMapping("/publisher/{publisher}")
	public List<Book> findBookByPub(@PathVariable String publisher) {
		return bookService.findBookByPub(publisher);
	}

	// 책 제목으로 책 리스트 불러옴 + 검색 -----------------------------------------------
	@GetMapping("/main/{title}")
	public List<Book> findBookList(@PathVariable String title) {

		if (title.equals("notSearch"))
			title = "";

		title = "%" + title + "%";
		List<Book> book = bookService.findByTitle(title);
		return book;
	}

	// 책 카테고리로 책 리스트 불러옴 + 검색 -----------------------------------------------
	@GetMapping("/category/{category}")
	public List<RentDto> findBookCategory(@PathVariable String category) {
		if (category.equals("notSearch"))
			category = "";

		category = "%" + category + "%";
		List<RentDto> book = bookService.getBookCategory(category);
		return book;
	}

	// 책 대여 -----------------------------------------------
	@GetMapping("/user/main/{bookno}/{return_date}")
	public String rentBook(@PathVariable int bookno, String return_date) {

		Rent rent = new Rent();

		User userinfo = (User) session.getAttribute("userinfo");

		int cnt = bookService.rentCnt(userinfo.getNo());

		rent.setUser_no(userinfo.getNo());
		rent.setUser_id(userinfo.getId());
		rent.setBook_no(bookno);
		rent.setReturn_date(return_date);
		System.out.println(return_date);

		// 사용자가 대여한 책이 3권 미만일 경우 대여가능
		if (cnt < 3) {
			if (bookService.insert(rent)) {
				// 책 대여시 usebook에 카운트 +1
				bookService.update(bookno);
				return "success";
			} else {
				return "fail";
			}
		} else {
			return "failCnt";
		}

	}

	// 책 반납 -----------------------------------------------
	@GetMapping("/mypage/delete/{no}")
	public String returnBook(@PathVariable int no) {

		if (bookService.delete(no)) {
			// 책 대여시 usebook에 카운트 +1
			bookService.update(no);
			return "success";
		} else {
			return "fail";
		}
	}

	// 책 리스트 대여순으로 불러옴 -----------------------------------------------
	@GetMapping("/main/rank")
	public List<Book> findBookRank() {
		List<Book> book = bookService.getBookRank();
		return book;
	}

	// 관리자가 도서 삭제 -----------------------------------------------
	@GetMapping("/adminpage/deletebook/{no}/{img}")
	public String deleteBook(@PathVariable int no, @PathVariable String img) {

		File file = new File(
				"C:\\Users\\PC\\workspace\\01. 이전 프로젝트\\01. 도서관리시스템\\BookSys\\bookfe\\public\\img\\" + img);

		if (file.exists()) {
			// 파일이 존재할 떄
			if (file.delete()) {
				// 파일 삭제 성공 후 DB에 데이터 삭제
				if (bookService.deletebook(no)) {
					return "success";
				} else {
					return "fail";
				}
			} else {
				// 존재하지만 삭제 실패했을 때
				return "fail";
			}
		} else {
			// 파일이 존재하지 않을 때
			return "notExist";
		}
	}

	// 관리자가 도서 등록 -----------------------------------------------
	@PostMapping("/adminbook/add")
	public String addBook(HttpServletRequest request, @RequestParam(value = "title") String title,
			@RequestParam(value = "writer") String writer, @RequestParam(value = "contents") String contents,
			@RequestParam(value = "price") int price, @RequestParam(value = "publisher") String publisher,
			@RequestParam(value = "category") String category, @RequestParam(value = "file") MultipartFile file)
			throws Exception {

		String contentType = file.getContentType();
		String originalFileExtension;

		System.out.println(file.getContentType());
		// 확장자 명이 없으면 이 파일은 잘못된 것이다
		if (ObjectUtils.isEmpty(contentType)) {
			return "break";
		} else {
			if (contentType.contains("image/jpeg")) {
				originalFileExtension = ".jpg";
				System.out.println(originalFileExtension);
			} else if (contentType.contains("image/png")) {
				originalFileExtension = ".png";
			} else if (contentType.contains("image/gif")) {
				originalFileExtension = ".gif";
			} else if (contentType.contains("image/jpg")) {
				originalFileExtension = ".jpg";
			}
			// 다른 파일 명이면 아무 일 하지 않는다
			else {
				return "break";
			}

			// 사진 저장시 같은 이름의 사진 들어올수 있으니까 날짜, 시간으로 파일 이름 저장
			Date nowDate = new Date();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd HHmmss");
			// Date=>String 으로 형변환
			String tempDate = simpleDateFormat.format(nowDate);

			// book 객체에 file 정보 set해주기
			Book book = new Book();
			book.setTitle(title);
			book.setWriter(writer);
			book.setPrice(price);
			book.setContents(contents);
			book.setPublisher(publisher);
			book.setImg(tempDate + originalFileExtension);

			if (category.equals("카테고리 선택")) {
				System.out.println("카테고리 선택 X");
				return "selectCat";
			} else {
				System.out.println("카테고리 선택 O");
				book.setCategory(category);
			}
			// 디비에 insert 되면 사진을 폴더에 받기
			if (bookService.insertbook(book)) {
				File new_fileName = new File(tempDate + originalFileExtension);
				file.transferTo(new_fileName);

				return "success";
			}
			return "fail";
		}
	}

	// 도서 정보 수정 -----------------------------------------------
	// no로 도서 리스트 조회
	@Transactional(rollbackFor = Exception.class)
	@PostMapping("/adminbook/update")
	public String updateBook(HttpServletRequest request, @RequestParam(value = "title") String title,
			@RequestParam(value = "no") int no, @RequestParam(value = "writer") String writer,
			@RequestParam(value = "contents") String contents, @RequestParam(value = "price") int price,
			@RequestParam(value = "img") String img, @RequestParam(value = "file", required = false) MultipartFile file)
			throws Exception {

		// book 객체에 file 정보 set해주기
		Book book = new Book();

		book.setNo(no);
		book.setTitle(title);
		book.setWriter(writer);
		book.setPrice(price);
		book.setContents(contents);

		// 기존 도서 이미지 말고 새 이미지 등록시
		if (!(file == null)) {
			String contentType = file.getContentType();
			String originalFileExtension;

			System.out.println("Null 아닐때");
			// 확장자 명이 없으면 이 파일은 잘못된 것이다
			if (ObjectUtils.isEmpty(contentType)) {
				return "break";
			} else {
				if (contentType.contains("image/jpeg")) {
					originalFileExtension = ".jpg";
					System.out.println(originalFileExtension);
				} else if (contentType.contains("image/png")) {
					originalFileExtension = ".png";
				} else if (contentType.contains("image/gif")) {
					originalFileExtension = ".gif";
				} else if (contentType.contains("image/jpg")) {
					originalFileExtension = ".jpg";
				}
				// 다른 파일 명이면 아무 일 하지 않는다
				else {
					return "break";
				}
			}

			// 사진 저장시 같은 이름의 사진 들어올수 있으니까 날짜, 시간으로 파일 이름 저장
			Date nowDate = new Date();
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd HHmmss");
			// Date=>String 으로 형변환
			String tempDate = simpleDateFormat.format(nowDate);

			book.setImg(tempDate + originalFileExtension);

			File new_fileName = new File(tempDate + originalFileExtension);
			file.transferTo(new_fileName);

			bookService.updatebook(book);

			return "success";
		} else {
			// 이미지 외에 다른거만 수정할 때
			System.out.println("기존 이미지 일때");
			book.setImg(img);
			bookService.updatebook(book);
			System.out.println(book);
			return "success";
		}
	}

}
